<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spotlights And Solutions on Witty Writeups</title>
    <link>http://jeansung.github.io/blog/categories/spotlights-and-solutions/</link>
    <description>Recent content in Spotlights And Solutions on Witty Writeups</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 05 Jan 2016 00:26:50 -0800</lastBuildDate>
    <atom:link href="http://jeansung.github.io/blog/categories/spotlights-and-solutions/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>10 Things I Learned Doing (Almost) 20 Interviews</title>
      <link>http://jeansung.github.io/blog/post/interviewing_fall2015/</link>
      <pubDate>Tue, 05 Jan 2016 00:26:50 -0800</pubDate>
      
      <guid>http://jeansung.github.io/blog/post/interviewing_fall2015/</guid>
      <description>&lt;p&gt;This semester I spent a long time interviewing for a full time job. Apparently CS interview season for new grads is in the fall. Early fall. I started interviewing seriously mid September and accepted my offer from Facebook late November. Here&amp;rsquo;s a few things, 10 specifically, I learned after 18 interviews (counting full day rounds as 1) and 30+ hours of interviewing.&lt;/p&gt;

&lt;p&gt;1) Regarding my time line, everyone&amp;rsquo;s different. I had friends who accepted a job even before school started, and who started interviewing in August. August!! Woah!!. I have friends who are still interviewing. And everywhere in between. It&amp;rsquo;s okay either way. But I will say that it&amp;rsquo;s good to be done. I don&amp;rsquo;t really like interviewing.&lt;/p&gt;

&lt;p&gt;2) What you learn in class is not exactly what you will be asked. Obviously. But this doesn&amp;rsquo;t mean that class wasn&amp;rsquo;t important or that you can get by just reading books like &amp;ldquo;Cracking the Coding Interview&amp;rdquo; and skate by. Class is still important, it&amp;rsquo;s just that by the time you are a senior, people assume you know the fundamentals and ask questions that get at more.&lt;/p&gt;

&lt;p&gt;Specifically, my questions were about solving algorithms based problems and considering how different data structures would perform under different circumstances.&lt;/p&gt;

&lt;p&gt;3) Related to point number 1. Actually, you are going to get a whole range of questions.  I personally use a metric that harder interview questions means a more promising company. Or at least more interesting questions. I have been asked to define some really obscure C++ keyword and I&amp;rsquo;ve been asked to reverse a linked list or even merge two sorted linked lists. I don&amp;rsquo;t think there is value in any of those questions. If you are a junior or without many options, then maybe you don&amp;rsquo;t have a choice. But I was lucky enough (and I interviewed enough) to have a choice and I really dislike those questions. I chose not to continue interviewing with some companies that asked questions like that.&lt;/p&gt;

&lt;p&gt;The first question - define some C++ keyword is the worst question. Literally no chance to demonstrate any skills I&amp;rsquo;ve learned. It&amp;rsquo;s a test to see if I have memorized C++ keywords. I know that companies who have their HR people (or otherwise non technical employees) do first rounds can&amp;rsquo;t ask more questions than one with one correct answer. The second type of question is slightly better - there are several ways to structure the code for merging a linked lists and then you can discuss the benefits and drawbacks of different methods.  Still not that interesting because you are just choosing from several correct answers. Nothing new that you&amp;rsquo;re coming up with. But at least it&amp;rsquo;s not just straight recall.&lt;/p&gt;

&lt;p&gt;I like questions that are hard for me (not just reciting the solution that&amp;rsquo;s canonical or known to be best) and help demonstrate the problem solving skills I have learned slaving away at algorithms homework sets. Those are the interesting questions and the types of hints and nudges you get from the interviewer can be a pretty good metric for what kind of engineer they are - will they provide guidance for you when you are a new employee just trying to figure some things out. Not just will, but how will they do it. Maybe this is reading too much into it, but they are in a position of power over you as an interview and later as a senior employee. Are they nice people? That matters if you&amp;rsquo;re taking a 9-5, M-F job.&lt;/p&gt;

&lt;p&gt;4) Ask your friends for help! Especially if there are upperclass people in your department who you are friends with. Everyone starts out kind of lost and even things that may seem obvious to you after interviewing can be totally over the head of a noob.&lt;/p&gt;

&lt;p&gt;I am so grateful for the many older students who referred me, forwarded my resume, helped me prepared for interviews, looked over my resume, etc. Also, the friends who gave me emotional support through the rejections and crappy interviews. There will be crappy interviews and shitty experiences. Friends definitely help with that. My best friend left me a sweet note on my return from Grace Hopper aka 7 interviews in 2 days. Return the favor after you&amp;rsquo;ve gotten a job. I&amp;rsquo;ve reviewed some resumes and offered pointers. And taught a 10 minute session on hash tables. And sat with friends debriefing good and bad interviews.&lt;/p&gt;

&lt;p&gt;5) Best way to actually practice is to simulate it. Yes, this is hard. Yes, I know that juggling 5-6 classes (especially a capstone class that averages 15 hours of work/week) , extracirrciulars and all the other busy senior stuff makes it really hard to squeeze time in. I solve this problem by just brute force interviewing a lot until it wasn&amp;rsquo;t scary for me anymore. I used to get really sweaty and anxious during interviews. Even if the question was about hash tables or something else that I knew very well. Fast forward a month, I&amp;rsquo;m wearing plaid shirts and jeans to my Facebook interview (I was going for the Seattle vibe). Your mileage may vary for brute forcing it.&lt;/p&gt;

&lt;p&gt;6) If you&amp;rsquo;re scared or nervous because you are worried about messing up, which nobody likes to do, here&amp;rsquo;s the best piece of advice I&amp;rsquo;ve ever read on the topic. Think of the interview like a conversation with a fellow engineer. Pretend he or she is a friend that called you with a technical question. Obviously, you have to do more of the leg work, but it helps me mentally to frame it as less of a test and more of a conversation. This works better if the question is actually interesting, but I digress. Put them on your level.&lt;/p&gt;

&lt;p&gt;7) It&amp;rsquo;s okay to turn down interview offers even if you aren&amp;rsquo;t done yet. It helps if you have an offer from a company you like, but even if you have offers from companies that aren&amp;rsquo;t your first choice, or no offers, don&amp;rsquo;t interview for the sake of it. Of course, at first, I did as part of my brute force approach. But after a while, there&amp;rsquo;s a line between good practice, an interesting opportunity and burning yourself out. Remember to be polite and say thank you. Don&amp;rsquo;t burn those bridges. I had to turn down some really cool opportunities just because I was already overbooked with interviews and classes. But not now doesn&amp;rsquo;t have to be not never.&lt;/p&gt;

&lt;p&gt;8) Behavioral questions suck. These are questions like &amp;ldquo;describe your best/worst group experience&amp;rdquo; and &amp;ldquo;how well do you work with other people?.&amp;rdquo; I know they are sussing out whether you are a good team player. But these questions always feel forced and my answers always feel forced. Like I need to tell a true story, and demonstrate how I took initiative or was a leader. Real life is not always so insightful.&lt;/p&gt;

&lt;p&gt;9) It&amp;rsquo;s okay to have things you are picky about. Especially if this is a full time job that you are looking for. For example, location might not matter as much for the summer but I know I am not in a place where I want to live full time in the middle of the Bay Area right now. Way too tech saturated. Some other things I&amp;rsquo;m picky about: what the company actually does and whether I am passionate about the product (even though most technical work should be similar), the number of females in senior roles, the company culture.&lt;/p&gt;

&lt;p&gt;An aside on the gender thing. It&amp;rsquo;s not just how many female engineers they have. It&amp;rsquo;s also how many women senior engineers or women in leadership. This goes for other minorities too. A company&amp;rsquo;s ability to recruit and sign on women is important. But it&amp;rsquo;s also important to see if they like it enough to stay and if the company helps them thrive. You might not get much choice with the matter but this is a distinction I found interesting to ask about.&lt;/p&gt;

&lt;p&gt;Also, company culture is really vague. A specific example of this might be might be how the company treats its codebase. Obviously, they are closed to outside. But how about internally? Are things only on a need to know basis or is it okay to have more knowledge of what&amp;rsquo;s going on. I think I like the latter. I&amp;rsquo;m getting the latter.&lt;/p&gt;

&lt;p&gt;10) Negotiation is a weird thing. I was a told a lot of things about how I should negotiate and get multiple offers to negotiate with. I saw friends do it last year. This might be true and I still agree that there&amp;rsquo;s no harm in trying. However, personally, I was given pretty comparable offers (I had 3), and there wasn&amp;rsquo;t much time to negotiate (especially because it was over Thanksgiving). I am happy though with what I ended up with, and I have heard friends who have gotten similar offers from the same companies. I think it&amp;rsquo;s important to check that you are getting offers on par with your school peers (unless they were interns at a company and going back) and to market rate. I think it is important to double check that you are not getting less for no good reason. I don&amp;rsquo;t think, based on my experience that Big Box Company A would give me less because I&amp;rsquo;m a girl, but it still makes me feel better to verify  with my male friends. Also, remember cost of living. 100k in San Fransisco is very different from 100k in Madison, Wisconsin.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Google Forms to Budget</title>
      <link>http://jeansung.github.io/blog/post/google-form-budget/</link>
      <pubDate>Tue, 04 Aug 2015 08:30:38 -0700</pubDate>
      
      <guid>http://jeansung.github.io/blog/post/google-form-budget/</guid>
      <description>

&lt;h4 id=&#34;before-the-summer:ff2dc01f53c5092c45e82cd6a8ccdc4a&#34;&gt;Before the summer&lt;/h4&gt;

&lt;p&gt;So the background for this is that I&amp;rsquo;ve been using Excel to budget my summer spending since the summer after high school. A lot has changed since then. Back in Summer 2012, I spent less than $1000 for the entire summer, lived at home and worked 7 hours / week at a minimum wage job. This summer, I&amp;rsquo;m living with friends in Seattle, working full time at an internship, spending about $4000 for the summer. I used to spend money by my parents credit card and cash. Now I have my own credit card. I pay rent and buy groceries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Then:&lt;/strong&gt; Excel or other tsv, tracked by week
&lt;br&gt;
&lt;strong&gt;Now:&lt;/strong&gt; Google Forms and Google spreadsheet&lt;/p&gt;

&lt;h4 id=&#34;summer-setup:ff2dc01f53c5092c45e82cd6a8ccdc4a&#34;&gt;Summer setup&lt;/h4&gt;

&lt;p&gt;I created a google form to track my expenses. I would gather all the relevant information that I thought was necessary. See below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/hiZ0hd3.png =516x140&#34; alt=&#34;&#34; /&gt;
&lt;br&gt;
&lt;br&gt;
&lt;img src=&#34;http://i.imgur.com/XivL2Nc.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;What I do: After I spend money, I collect my receipts and enter in the information into the form and submit.&lt;/p&gt;

&lt;h4 id=&#34;feedback:ff2dc01f53c5092c45e82cd6a8ccdc4a&#34;&gt;Feedback&lt;/h4&gt;

&lt;p&gt;The good: It&amp;rsquo;s uniform and I can capture information in a way that makes sense to me. I have tried using online categories before and having a lot of preset values makes it difficult to see what I actually am spending in categories that matter to me. It was really easy to set up, and Google Forms have a good summary view.&lt;/p&gt;

&lt;p&gt;The bad: It&amp;rsquo;s really hard, actually impossible to change the values you enter after you leave the form- if something gets messed up, there is no way to delete the data from the form entries. That makes the summary view useless because you can&amp;rsquo;t erase mistaken values. Additionally, the summary view is not customizable. Plus, there is a lot of work to do per transaction, especially since most of my spending is done by credit card these days. It would be nice if I could do the set up just once and then just track remotely.&lt;/p&gt;

&lt;p&gt;The next: For the fall, I am try using &lt;a href=&#34;https://www.mint.com/&#34;&gt;Mint&lt;/a&gt;. Stay tuned for a review on that!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Hugo Website Setup</title>
      <link>http://jeansung.github.io/blog/post/hugo-setup/</link>
      <pubDate>Mon, 03 Aug 2015 22:01:05 -0700</pubDate>
      
      <guid>http://jeansung.github.io/blog/post/hugo-setup/</guid>
      <description>

&lt;h3 id=&#34;getting-started:64a00e54bc112d22b252689389accbce&#34;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;I was lured to use &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; because of its pretty front end on the main website and the promise that I could develop in Markdown. I have 3 websites, my &lt;a href=&#34;http://jeansung.github.io/frontpage/&#34;&gt;front page&lt;/a&gt;, my &lt;a href=&#34;http://jeansung.github.io/blog/&#34;&gt;blog&lt;/a&gt; and my &lt;a href=&#34;http://jeansung.github.io/Projects/&#34;&gt;portfolio&lt;/a&gt; and the first two are setup through hugo. Here&amp;rsquo;s my setup story.&lt;/p&gt;

&lt;h3 id=&#34;my-setup:64a00e54bc112d22b252689389accbce&#34;&gt;My setup&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m hosting it on github pages. Here&amp;rsquo;s my &lt;a href=&#34;https://github.com/jeansung/MyPersonalPage/wiki&#34;&gt;tutorial&lt;/a&gt; how to set that up. I&amp;rsquo;m using hugo with github pages. Here&amp;rsquo;s the &lt;a href=&#34;http://gohugo.io/tutorials/github-pages-blog/&#34;&gt;tutorial&lt;/a&gt; I used.&lt;/p&gt;

&lt;p&gt;When I test my changes, I run the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server --watch --buildDrafts --theme=material-design
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command runs a local server for the website to sit on, build drafts, automatically reloads pages and then applies the theme. You can delete the &lt;code&gt;public/&lt;/code&gt; folder to force the theme to reload completely.&lt;/p&gt;

&lt;p&gt;When I&amp;rsquo;m ready to publish, I use a modified version of the tutorial&amp;rsquo;s demo &lt;code&gt;deploy.sh&lt;/code&gt; script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

# Black        0;30     Dark Gray     1;30
# Red          0;31     Light Red     1;31
# Green        0;32     Light Green   1;32
# Brown/Orange 0;33     Yellow        1;33
# Blue         0;34     Light Blue    1;34
# Purple       0;35     Light Purple  1;35
# Cyan         0;36     Light Cyan    1;36
# Light Gray   0;37     White         1;37

CYAN=&#39;\033[0;36m&#39;
NC=&#39;\033[0m&#39;

echo -e &amp;quot;${CYAN} Deploying updates to GitHub... ${NC}&amp;quot;


# Build the project. 
hugo --theme material-design

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;Rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master
git subtree push --prefix=public git@github.com:jeansung/blog.git gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;my-thoughts:64a00e54bc112d22b252689389accbce&#34;&gt;My thoughts&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s not all rainbows and puppies. This set up is definitely better than my last set up, which consisted mainly of using github pages to host the website and then using &lt;code&gt;HTML&lt;/code&gt; tinkering to create the content. That was hard coded and unsustainable. The templates here make it much easier to change only what I need to. However, the &lt;code&gt;git subtree&lt;/code&gt; workflow is very messy when it goes wrong and I had to &lt;code&gt;rm -rf&lt;/code&gt; some of the earlier repos that got messed up. My setup really doesn&amp;rsquo;t use the version control in the sense of branching and rolling back. It&amp;rsquo;s almost entirely a linear setup, so that works. But I could imagine more heartache if you needed to &lt;code&gt;git revert&lt;/code&gt; some files. Also, I need to consolidate the websites to one site, but that&amp;rsquo;s for a different day.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Resume Advice</title>
      <link>http://jeansung.github.io/blog/post/resume-tips-newbie/</link>
      <pubDate>Mon, 03 Aug 2015 21:52:16 -0700</pubDate>
      
      <guid>http://jeansung.github.io/blog/post/resume-tips-newbie/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m not a professional resumé writing expert. But I&amp;rsquo;ve been getting practice updating mine for about 4 years now, since the senior year of high school (when applying to colleges) to now when I&amp;rsquo;m about to look for a real full time job on my way out of college (one more year left).&lt;/p&gt;

&lt;p&gt;For reference, my &lt;a href=&#34;https://github.com/jeansung/ResumeCollection&#34;&gt;resume collection&lt;/a&gt; my &lt;a href=&#34;https://github.com/jeansung/ResumeTemplate&#34;&gt;resume templates&lt;/a&gt;, or my &lt;a href=&#34;https://github.com/jeansung/ResumeCollection/raw/master/master_resume/JEANSUNG_RESUME.pdf&#34;&gt;current resume&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is my advice for how to present a summer experience, a project you did on a resume so that all the important information is communicated.&lt;/p&gt;

&lt;h3 id=&#34;what-you-did:bd80578ac8a5ed369aea3c62f0d851c4&#34;&gt;What you did&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s pretty obvious but you need to write about what you actually do. This is a description of the job that was performed, the piece of software developed or created. For example,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-  Developed educational iPad game for middle school students&lt;/li&gt;
&lt;li&gt;-  Wrote a client library for XYZ API&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;how-you-did-it:bd80578ac8a5ed369aea3c62f0d851c4&#34;&gt;How you did it&lt;/h3&gt;

&lt;p&gt;Recruiters, in my experience like seeing what sort of technology was used. It lends legitimacy to your project (are you using the right tool for the job? hopefully!) and backs up your skills section (where did you use your python skills? Oh, this project!). This is about the programming languages used, the tools, technologies, APIs and libraries that your project relies on.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;- utilizing Java and JMonkey Game Engine&lt;/li&gt;
&lt;li&gt;- with Python and Pandas and Numpy&lt;/li&gt;
&lt;li&gt;- using Google BigQuery and gcs Command Line tools&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;why-it-matters:bd80578ac8a5ed369aea3c62f0d851c4&#34;&gt;Why it matters&lt;/h3&gt;

&lt;p&gt;Cool project, but why? Cool work at your summer job, but why? Why were you necessary? Why were you a worthwhile intern or why was your project interesting? For a job, it&amp;rsquo;s always nice to have something about what your work did to help the company&amp;rsquo;s bottom line? If you have specific numbers, use them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;- implemented xyz that saved 2 hours / week of employee time&lt;/li&gt;
&lt;li&gt;- presented research to save company time and resources from unviable path&lt;/li&gt;
&lt;li&gt;- improved latency from 200ms to 2ms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a project, motivate what you did by showing why the thing you built was useful or explain who could use it. This can also help you think about the usability of your tool.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;- educational game for middle school students to help them with their math skills&lt;/li&gt;
&lt;li&gt;- created xyz with a user interface that reduced complexity of the front end view presented to customers&lt;/li&gt;
&lt;li&gt;- connected X and Y to simplify using tool Z&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;note:bd80578ac8a5ed369aea3c62f0d851c4&#34;&gt;Note&lt;/h3&gt;

&lt;p&gt;If you are writing about a summer job for a tech company, be sure to check with your manager or your HR team about what you can and cannot say about what you did. Especially if you worked for a national lab or signed a really long NDA. Getting a new job is good! Getting sued for breach of contract and leaking trade secrets is not.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git Hacks - WIP Edition</title>
      <link>http://jeansung.github.io/blog/post/git-hacks-wip/</link>
      <pubDate>Tue, 21 Jul 2015 22:05:06 -0700</pubDate>
      
      <guid>http://jeansung.github.io/blog/post/git-hacks-wip/</guid>
      <description>

&lt;p&gt;Today&amp;rsquo;s post is about some quick &lt;code&gt;git&lt;/code&gt; command line tricks if you are doing some work in progress (WIP).&lt;/p&gt;

&lt;p&gt;Scenario: You are working on the &lt;code&gt;master&lt;/code&gt; branch and then realize you are going to have to test these changes on a bigger scale (perhaps cross repo) and thus new to push your changes to a new branch.&lt;/p&gt;

&lt;p&gt;Setup: On master branch, some &lt;code&gt;git add&lt;/code&gt; have been made, no commits yet.&lt;/p&gt;

&lt;p&gt;Solution:&lt;/p&gt;

&lt;p&gt;First, remove all the staged files from the master branch. Use &lt;code&gt;git rm --cached&lt;/code&gt; and then either add the file path or the directory path to be removed. You can use &lt;code&gt;git status&lt;/code&gt; to find out what files are not staged yet. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Originally, everything is up to date
# but on the wrong branch 
git status 
On branch feature-branch
Your branch is up to date with origin/master
nothing to commit, working directory clean 

# Remove those files 
git rm --cached foo/
git rm --cached bar/foo.java

# Good, ready to be added to another branch
git status 
Changes not staged for commit:
	modified: foo/
Untracked files:
	bar/foo.java
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure to have the &lt;code&gt;--cached&lt;/code&gt; flag because that means that you are removing the file from the git index to reset the tracking but not the actual file from your local file system. You don&amp;rsquo;t want that, because you are about to push these changes to another branch.&lt;/p&gt;

&lt;p&gt;Second, checkout a new branch. The cool thing is that the current state of files follows you to the current branch. Then, push to remote repo, setting up tracking to be from the origin (usual use case).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b feature-branch
git add .
git commit -m &amp;quot;Pushing changes to local feature branch&amp;quot;
git push -u origin feature-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last command, &lt;code&gt;git push -u origin feature-branch&lt;/code&gt; sets up the remote branch to track changes from. In the future, you only need to write &lt;code&gt;git push -u feature-branch&lt;/code&gt; and your changes will be pushed to the remote branch of the same name as your local branch.&lt;/p&gt;

&lt;h3 id=&#34;sources:9325ce92720b6ac61078754c07b964c3&#34;&gt;Sources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/1351567/putting-uncommitted-changes-at-master-to-a-new-branch-by-git&#34;&gt;Pushing uncommitted changes to a new branch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/7434449/why-use-git-rm-to-remove-a-file-instead-of-rm&#34;&gt;Using git rm &amp;ndash;cached &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>